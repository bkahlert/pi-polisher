#!/bin/bash
# USB Gadget: https://www.kernel.org/doc/html/latest/usb/index.html

shopt -s nullglob

is_module_loaded() {
  local -r module=${1?:module missing}
  lsmod | grep -q "^$module "
}

load_module() {
  local -r module=${1?:module missing}
  ! is_module_loaded "$module" || return 0

  modprobe "$module"
  for i in {1..100}; do
    ! is_module_loaded "$module" || return 0
    sleep 0.1
  done

  printf "\033[31mERROR: Failed to load module \033[3m%s\033[23m within \033[3m%s\033[23m.\033[0m\n" "$module" "10s" >&2
  exit 1
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#creating-the-gadgets
create_gadget() {
  local -r CONFIGFS_HOME=/sys/kernel/config
  local -r gadget_name=${1?:gadget name missing}
  local -r gadget_dir="$CONFIGFS_HOME/usb_gadget/$gadget_name"

  printf "\033[1mCreating gadget \033[3m%s\033[23m...\033[0m\n" "$gadget_name" >&2

  load_module libcomposite

  mkdir -p "$gadget_dir" || { printf "\033[31mERROR: Failed to create directory \033[3m%s\033[23m.\033[0m\n" "$gadget_dir" >&2 && exit 1; }
  cd "$gadget_dir" || { printf "\033[31mERROR: Failed to change directory to \033[3m%s\033[23m.\033[0m\n" "$gadget_dir" >&2 && exit 1; }

  echo '0x1d6b' >idVendor  # Linux Foundation
  echo '0x0104' >idProduct # Multifunction Composite Gadget
  echo '0x0100' >bcdDevice # v1.0.0
  echo '0x0200' >bcdUSB    # USB2
  echo '0xef' >bDeviceClass
  echo '0x02' >bDeviceSubClass
  echo '0x01' >bDeviceProtocol

  mkdir -p strings/0x409
  echo '{{ usb_gadget.serialnumber }}' >strings/0x409/serialnumber
  echo '{{ usb_gadget.manufacturer }}' >strings/0x409/manufacturer
  echo '{{ usb_gadget.product }}' >strings/0x409/product

  # OS descriptors
  mkdir -p os_desc
  echo '1' >os_desc/use
  echo '0xcd' >os_desc/b_vendor_code
  echo 'MSFT100' >os_desc/qw_sign
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#creating-the-configurations
create_config() {
  local -r config=${1?:config missing}

  printf "\033[1mCreating configuration \033[3m%s\033[23m...\033[0m\n" "$config" >&2

  case "$config" in
  *.*)
    mkdir -p "configs/$config"
    mkdir -p "configs/$config"/strings/0x409
    echo 'USB gadget functions: {% if usg_gadget_features %}{{ usg_gadget_features | join(', ') }}{% else %}-{% endif %}' >"configs/$config"/strings/0x409/configuration
    echo '250' >configs/c.1/MaxPower
    ln -s "configs/$config" os_desc
    ;;
  *)
    printf "\033[31mERROR: The configuration needs to have the format \033[3m<name>\033[23m.\033[3m<number>\033[23m.\033[0m\n" >&2
    exit 1
    ;;
  esac
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#creating-the-functions
create_function() {
  # function names correspond to USB CDC: https://en.wikipedia.org/wiki/USB_communications_device_class
  local -r function=${1?:function missing}

  printf "\033[1mCreating function \033[3m%s\033[23m...\033[0m\n" "$function" >&2

  case "$function" in
  acm.*)
    # see https://www.kernel.org/doc/html/latest/usb/gadget-testing.html#acm-function
    mkdir -p "functions/$function"
    ;;
  ecm.*)
    # Ethernet Control Model (ECM): ethernet over USB protocol by the USB Implementers Forum
    # see https://www.kernel.org/doc/html/latest/usb/gadget-testing.html#ecm-function
    # see https://en.wikipedia.org/wiki/Ethernet_over_USB
    mkdir -p "functions/$function"
    {% if usb_gadget.ethernet.device_mac is defined %}
    echo '{{ usb_gadget.ethernet.device_mac }}' >"functions/$function"/dev_addr
    {% endif %}
    {% if usb_gadget.ethernet.host_mac is defined %}
    echo '{{ usb_gadget.ethernet.host_mac }}' >"functions/$function"/host_addr
    {% endif %}
    ;;
  rndis.*)
    # Remote NDIS (RNDIS): proprietary ethernet over USB protocol by Microsoft
    # see https://en.wikipedia.org/wiki/RNDIS
    # see https://en.wikipedia.org/wiki/Ethernet_over_USB
    # TODO test (on Windows)
    mkdir -p "functions/$function"/os_desc/interface.rndis
    echo RNDIS >"functions/$function"/os_desc/interface.rndis/compatible_id
    echo 5162001 >"functions/$function"/os_desc/interface.rndis/sub_compatible_id
    ;;
  mass_storage.*)
    # see https://www.kernel.org/doc/html/latest/usb/mass-storage.html
    # see https://www.kernel.org/doc/html/latest/usb/gadget-testing.html#mass-storage-function

    # TODO parametrize
    #USB_FILE=/data/usb-mass-storage.img
    #USB_FILE_BLOCK_COUNT=2048
    #USB_FS_TYPE=ext4

    # create (sparse) backing-file if necessary
    : "${USB_FILE:=/data/usb-mass-storage.img}"
    if [ ! -f "$USB_FILE" ]; then
      mkdir -p "${USB_FILE%/*}"
      dd if=/dev/zero of="$USB_FILE" bs=64M \
        seek="${USB_FILE_BLOCK_COUNT:-2048}" count=0
      mkfs.${USB_FS_TYPE:-exfat} "$USB_FILE"
    fi

    # configure gadget
    mkdir -p "functions/$function"
    echo '1' >"functions/$function"/stall
    echo '0' >"functions/$function"/lun.0/cdrom
    echo '0' >"functions/$function"/lun.0/ro
    echo '0' >"functions/$function"/lun.0/nofua
    echo "$USB_FILE" >"functions/$function"/lun.0/file
    ;;
  *.*)
    printf "\033[31mERROR: The function \033[3m%s\033[23m is not supported by this setup script.\033[0m\n" "${function/.*/}" >&2
    exit 1
    ;;
  *)
    printf "\033[31mERROR: The configuration needs to have the format \033[3m<name>\033[23m.\033[3m<instance name>\033[23m.\033[0m\n" >&2
    exit 1
    ;;
  esac
}

assoc_function() {
  local -r function=${1?:function missing}
  local -r config=${2?:config missing}

  printf "\033[1mAssociating function \033[3m%s\033[23m with configuration \033[3m%s\033[23m...\033[0m\n" "$function" "$config" >&2

  ln -s "functions/$function" "configs/$config/"
}

enable_gadget() {
  printf "Enabling gadget in \033[3m%s\033[23m... " "$PWD" >&2
  if [ "$(cat /sys/kernel/config/usb_gadget/g1/UDC)" ]; then
    printf "\033[33mWARNING: Gadget in \033[3m%s\033[23m is already enabled.\033[0m\n" "$PWD" >&2
  else
    ls /sys/class/udc >UDC
    printf "\033[32m✔︎\033[0m\n" >&2
  fi
}

disable_gadget() {
  printf "Disabling gadget in \033[3m%s\033[23m... " "$PWD" >&2
  if [ "$(cat /sys/kernel/config/usb_gadget/g1/UDC)" ]; then
    echo '' >UDC
    printf "\033[32m✔︎\033[0m\n" >&2
  else
    printf "\033[33mWARNING: No enabled gadget found in \033[3m%s\033[23m.\033[0m\n" "$PWD" >&2
  fi
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#cleaning-up
destroy_gadget() {
  local -r CONFIGFS_HOME=/sys/kernel/config
  local -r gadget_name=${1?:gadget name missing}
  local -r gadget_dir="$CONFIGFS_HOME/usb_gadget/$gadget_name"

  [ -d "$gadget_dir" ] || return 0

  (cd "$gadget_dir" && disable_gadget)

  printf "\033[1mRemoving functions from configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    for function in "$config"/*.*; do
      printf "Removing function \033[3m%s\033[23m from configuration \033[3m%s\033[23m.\033[0m\n" "${function##*/}" "${config##*/}" >&2
      rm "$function"
    done
  done

  printf "\033[1mRemoving strings directories from configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    for strings in "$config"/strings/*; do
      printf "Removing strings directory \033[3m%s\033[23m from configuration \033[3m%s\033[23m.\033[0m\n" "${strings##*/}" "${config##*/}" >&2
      rmdir "$strings"
    done
  done

  printf "\033[1mRemoving os_desc symlink from configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    printf "Removing os_desc symlink from configuration \033[3m%s\033[23m.\033[0m\n" "${config##*/}" >&2
    [ ! -e "$config"/os_desc ] || rm "$config"/os_desc
  done

  printf "\033[1mRemoving configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    printf "Removing configuration \033[3m%s\033[23m.\033[0m\n" "${config##*/}" >&2
    rmdir "$config"
  done

  printf "\033[1mRemoving functions from the gadget...\033[0m\n" >&2
  for function in "$gadget_dir"/functions/*; do
    printf "Removing function \033[3m%s\033[23m.\033[0m\n" "${function##*/}" >&2
    rm "$function"
  done

  printf "\033[1mRemoving strings directories from the gadget...\033[0m\n" >&2
  for strings in "$gadget_dir"/strings/*; do
    printf "Removing strings directory \033[3m%s\033[23m from the gadget.\033[0m\n" "${strings##*/}" >&2
    rmdir "$strings"
  done

  printf "\033[1mRemoving os_desc directory from the gadget...\033[0m\n" >&2
  [ ! -d "$gadget_dir"/os_desc ] || rmdir "$gadget_dir"/os_desc

  printf "\033[1mRemoving the gadget \033[3m%s\033[23m...\033[0m\n" "$gadget_name" >&2
  rmdir "$gadget_dir"
}

main() {
  printf "\033[1mSetting up USB gadget...\033[0m\n" >&2

  destroy_gadget g1

  create_gadget g1
  create_config c.1

  {% if usb_gadget.mass_storage is defined %}
  create_function mass_storage.usb0
  assoc_function mass_storage.usb0 c.1
  {% endif %}

  {% if usb_gadget.serial is defined %}
  create_function acm.usb0
  assoc_function acm.usb0 c.1
  {% endif %}

  {% if usb_gadget.ethernet is defined %}
  create_function ecm.usb0
  assoc_function ecm.usb0 c.1
  {% endif %}

  # watch the udev event queue until all current events are handled
  # but no longer than 5 seconds
  udevadm settle -t 5 || :

  enable_gadget

  {% if usb_gadget.serial is defined %}
  systemctl start serial-getty@ttyGS0.service
  {% endif %}

  {% if usb_gadget.ethernet is defined %}
  ifup usb0
  systemctl restart dnsmasq
  {% endif %}
}

main "$@"
