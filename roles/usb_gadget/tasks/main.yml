---
# Best article found:
# - https://lwn.net/Articles/395712/
# Inspired by:
# - https://github.com/google/aiyprojects-raspbian-tools/blob/3abfb8d0133e44d9d215096798eb521ec31d81bd/packages/aiy-usb-gadget/gadget
# - https://github.com/bablokb/raspi2go
# - https://github.com/ckuethe/usbarmory/wiki/USB-Gadgets
# - https://github.com/zachthieme/config/blob/77cfa15f9c313ba6ee7b7e78e2a9267710ea657e/ansible/roles/usbNetwork/tasks/main.yml

- name: set defaults
  block:
    - name: set usb_gadget_features
      set_fact:
        usb_gadget_features: "{{ usb_gadget | default({},true) | dict2items | rejectattr('key', 'in', ['dr_mode', 'product', 'manufacturer', 'serialnumber']) | list | items2dict }}"

    - name: set dr_mode_value
      when: usb_gadget.dr_mode is defined
      set_fact:
        usb_gadget: "{{ usb_gadget | default({},true) | combine({'dr_mode': usb_gadget.dr_mode)}) }}"
      failed_when: usb_gadget.dr_mode is defined and usb_gadget.dr_mode not in usb_dr_mode_options

    - name: set default usb_gadget.product
      when: usb_gadget.product is undefined
      block:
        - name: compute usb_gadget.product
          shell: cat /proc/device-tree/model
          become: true
          register: usb_gadget_product_result
        - name: set usb_gadget.product
          set_fact:
            usb_gadget: "{{ usb_gadget | default({},true) | combine({'product': (usb_gadget_product_result.stdout | replace('\x00', ''))}) }}"

    - name: set default usb_gadget.manufacturer
      when: usb_gadget.manufacturer is undefined
      block:
        - name: set usb_gadget.manufacturer
          set_fact:
            usb_gadget: "{{ usb_gadget | default({},true) | combine({'manufacturer': 'Raspberry Pi Foundation'}) }}"

    - name: set default usb_gadget.serialnumber
      when: usb_gadget.serialnumber is undefined
      block:
        - name: compute usb_gadget.serialnumber
          shell: grep 'Serial' /proc/cpuinfo | awk '{print $3}' # TODO how unique is /proc/device-tree/serial-number
          become: true
          register: usb_gadget_serialnumber_result

        - name: set usb_gadget.serialnumber
          set_fact:
            usb_gadget: "{{ usb_gadget | default({},true) | combine({'serialnumber': (usb_gadget_serialnumber_result.stdout | hash('md5'))[:16]}) }}"

    - name: compute IP settings
      vars:
        usb0_cidr: "{{ usb_gadget_features.ethernet.cidr | default(default_usb0_cidr) }}"
      set_fact:
        usb0_cidr: "{{ usb0_cidr }}"                                                     #  10. 10. 10. 10/29
        usb0_cidr_netmask: "{{ usb0_cidr | ansible.utils.ipaddr('netmask') }}"           # 255.255.255.248 ↵
        # If the specified CIDR is the network address itself
        # or the unusable broadcast address, then use the first usable address.
        # Dnsmasq can deal with it.
        # Important: ipaddr untypically returns None if the CIDR is the network address.
        usb0_cidr_address: >-                                                            #  10. 10. 10. 10
          {{
          (usb0_cidr | ansible.utils.ipaddr('address') not in [None, usb0_cidr | ansible.utils.ipaddr('broadcast')])
          | ternary(usb0_cidr | ansible.utils.ipaddr('address'), usb0_cidr | ansible.utils.ipaddr('first_usable'))
          }}
        usb0_cidr_network: "{{ usb0_cidr | ansible.utils.ipaddr('network') }}"           #  10. 10. 10.  8
        usb0_cidr_first_usable: "{{ usb0_cidr | ansible.utils.ipaddr('first_usable') }}" #  10. 10. 10.  9
        usb0_cidr_last_usable: "{{ usb0_cidr | ansible.utils.ipaddr('last_usable') }}"   #  10. 10. 10. 14
        usb0_cidr_broadcast: "{{ usb0_cidr | ansible.utils.ipaddr('broadcast') }}"       #  10. 10. 10. 15

- name: set up system
  block:
    - name: update /boot/config.txt
      community.general.ini_file:
        path: /boot/config.txt
        no_extra_spaces: true
        section: all
        option: dtoverlay # to get current dr_mode: find /sys/ -name dr_mode; cat /sys/kernel/debug/usb/20980000.usb/dr_mode
        value: "dwc2{% if usb_gadget.dr_mode is defined %},dr_mode={{ usb_gadget.dr_mode }}{% endif %}"
        exclusive: false
        state: present
      become: true
      notify: reboot

    - name: load dwc2 module in /boot/cmdline.txt
      kernel_parameters:
        option: modules-load
        value: dwc2
      become: true
      notify: reboot

    - name: create /etc/modprobe.d/dwc2.conf
      ansible.builtin.copy:
        content: |
          install dwc2 /sbin/modprobe --ignore-install dwc2;  /sbin/modprobe libcomposite;
        dest: /etc/modprobe.d/dwc2.conf
        mode: "0644"
        force: true
      become: true
      notify: reboot


- name: install usb-gadget
  block:
    - name: copy usb-gadget script
      ansible.builtin.template:
        src: templates/usb-gadget.sh.j2
        dest: "{{ package_dir }}/usb-gadget"
        mode: "0755"
        force: true
      become: true
      notify: reboot
    - name: copy usb-gadget custom script
      ansible.builtin.template:
        src: templates/usb-gadget-custom.sh
        dest: "{{ package_dir }}/usb-gadget-custom"
        mode: "0755"
        force: true
      become: true
      notify: reboot

    - name: copy usb-gadget service
      ansible.builtin.template:
        src: templates/usb-gadget.service.j2
        dest: /etc/systemd/system/usb-gadget.service
        mode: "0644"
        force: true
      become: true

    - name: enable usb-gadget service
      ansible.builtin.systemd:
        name: usb-gadget.service
        daemon_reload: true
        enabled: true
      become: true
      notify: reboot

    - name: copy files
      ansible.posix.synchronize:
        src: files/
        dest: "{{ package_dir }}/"
      become: true

    - name: explain usb-gadget
      vars:
        marker_begin_latin1: "MARKER_BEGIN"
        marker_begin_unicode: "─=≡▰▩▩[ 蓬•ｏ•]⊐"
        marker_end_latin1: "MARKER_END"
        marker_end_unicode: "​​​"
        path: /etc/motd
      block:
        - name: convert markers to latin1
          ansible.builtin.replace:
            path: "{{ path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: "{{ marker_begin_unicode | regex_escape() }}", replace: "{{ marker_begin_latin1 }}" }
            - { regexp: "{{ marker_end_unicode | regex_escape() }}", replace: "{{ marker_end_latin1 }}" }
        - name: update block
          ansible.builtin.blockinfile:
            path: /etc/motd
            create: true
            mode: "0644"
            marker: "{mark}"
            marker_begin: "{{ marker_begin_latin1 }} USB gadget"
            block: |2
                  FEATURES: {% if usb_gadget_features.keys() %}{{ usb_gadget_features.keys() | join(', ') }}{% else %}-{% endif %}
            marker_end: "{{ marker_end_latin1 }}"
        - name: convert markers to unicode
          ansible.builtin.replace:
            path: "{{ path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: "{{ marker_begin_latin1 }}", replace: "{{ marker_begin_unicode }}" }
            - { regexp: "{{ marker_end_latin1 }}", replace: "{{ marker_end_unicode }}" }
      become: true


- name: set up usb0 network interface
  when: usb_gadget_features.ethernet is defined
  block:
    # dhcpcd: DHCP Client Daemon
    - name: prevent dhcpcd from configuring usb0 network interface
      ansible.builtin.lineinfile:
        path: /etc/dhcpcd.conf
        line: denyinterfaces usb0
      become: true

    - name: install dnsmasq
      ansible.builtin.apt:
        name: [ dnsmasq ]
        state: present
      become: true

    # Documentation: https://dnsmasq.org/docs/dnsmasq-man.html
    - name: configure usb0 network interface for dnsmasq
      block:
        - name: set options with values
          community.general.ini_file:
            path: /etc/dnsmasq.d/usb0.conf
            no_extra_spaces: true
            section: ''
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            mode: "0644"
          loop:
            - { option: interface, value: usb0 }
            - { option: dhcp-range, value: "{{ usb0_cidr_first_usable }},{{ usb0_cidr_last_usable }},{{ usb0_cidr_netmask }},1h" }
            - { option: dhcp-option, value: "3" }
            - { option: dhcp-option, value: "6" }
          become: true
        - name: set options without values
          ansible.builtin.lineinfile:
            path: /etc/dnsmasq.d/usb0.conf
            line: "{{ item.option }}"
            state: present
          loop:
            - { option: dhcp-authoritative }
            - { option: dhcp-rapid-commit }
            - { option: leasefile-ro }
          become: true

    - name: explain usb0 network interface
      vars:
        marker_begin_latin1: "MARKER_BEGIN"
        marker_begin_unicode: "─=≡▰▩▩[ 蓬•ｏ•]⊐"
        marker_end_latin1: "MARKER_END"
        marker_end_unicode: "​​​"
        path: /etc/motd
      block:
        - name: convert markers to latin1
          ansible.builtin.replace:
            path: "{{ path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: "{{ marker_begin_unicode | regex_escape() }}", replace: "{{ marker_begin_latin1 }}" }
            - { regexp: "{{ marker_end_unicode | regex_escape() }}", replace: "{{ marker_end_latin1 }}" }
        - name: update block
          ansible.builtin.blockinfile:
            path: /etc/motd
            create: true
            mode: "0644"
            marker: "{mark}"
            marker_begin: "{{ marker_begin_latin1 }} USB ethernet"
            block: |2
                  INTERFACE: usb0 — IP {{ usb0_cidr_address }} / {{ usb0_cidr_netmask }} — DHCP: {{ usb0_cidr_first_usable }} - {{ usb0_cidr_last_usable }}
                  HELP: pihero gadget
            marker_end: "{{ marker_end_latin1 }}"
        - name: convert markers to unicode
          ansible.builtin.replace:
            path: "{{ path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: "{{ marker_begin_latin1 }}", replace: "{{ marker_begin_unicode }}" }
            - { regexp: "{{ marker_end_latin1 }}", replace: "{{ marker_end_unicode }}" }
      become: true
