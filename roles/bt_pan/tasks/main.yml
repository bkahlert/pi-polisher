---
- name: check for bluetooth hardware
  block:
    - name: check if /sys/class/bluetooth exists
      stat:
        path: /sys/class/bluetooth
      register: bluetooth_dir

    - name: set has_bluetooth_hardware
      set_fact:
        has_bluetooth_hardware: "{{ bluetooth_dir.stat.exists }}"

- name: uninstall bluetooth services
  when: not has_bluetooth_hardware
  become: true
  ansible.builtin.apt:
    name:
      - bluetooth
      - bluez
      - bluez-firmware
      - bluez-tools
      - bridge-utils
    state: absent

- name: install bluetooth services
  when: has_bluetooth_hardware and bt_pan is defined
  vars:
    pins_file: /etc/bluetooth/pins
    pins: "{{ bt_pan.devices if bt_pan.devices is defined else [] }}"
    trusted: "{{ bt_pan.devices if bt_pan.devices is defined else [] }}"
  block:
    - name: install dependencies
      become: true
      ansible.builtin.apt:
        name:
          - bluetooth
          - bluez
          - bluez-tools
          - bridge-utils
        state: present

    - name: set up bt-network
      become: true
      block:
        - name: copy bt-network service
          ansible.builtin.template:
            src: templates/bt-network.service.j2
            dest: /etc/systemd/system/bt-network.service
            mode: "0644"
            force: true

        - name: enable bt-network service
          ansible.builtin.systemd_service:
            name: bt-network.service
            daemon_reload: true
            enabled: true

    - name: set up bt-agent
      become: true
      block:
        - name: copy bt-agent service
          ansible.builtin.template:
            src: templates/bt-agent.service.j2
            dest: /etc/systemd/system/bt-agent.service
            mode: "0644"
            force: true

        - name: enable bt-agent service
          ansible.builtin.systemd_service:
            name: bt-agent.service
            daemon_reload: true
            enabled: true

        - name: set PINs
          ansible.builtin.lineinfile:
            path: "{{ pins_file }}"
            create: true
            search_string: "{{ item.mac }}"
            line: "{{ item.mac }}    {{ item.pin | default('*', true) }}"
            state: present
            mode: "0640"
          loop: "{{ pins }}"

    - name: set bluetooth options
      become: true
      community.general.ini_file:
        path: /etc/bluetooth/main.conf
        section: "{{ item.section | default('General', true) }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      loop: "{{ bt_pan.options }}"

    - name: add users to bluetooth group
      become: true
      ansible.builtin.user:
        append: true
        name: "{{ item }}"
        groups: [ lp ]
      loop: "{{ group_members['users'] | default([]) }}"

    - name: copy files
      ansible.builtin.copy:
        src: files/
        dest: "{{ package_dir }}/"
        force: true
      become: true

    - name: restart services
      become: true
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: restarted
      loop:
        - bluetooth.service
        - bt-network.service
        - bt-agent.service


- name: set up pan0 network interface
  when: has_bluetooth_hardware and bt_pan is defined
  vars:
    pan0_cidr: "{{ bt_pan.cidr | default(default_pan0_cidr) }}"
  block:
    - name: compute IP settings
      set_fact:
        pan0_cidr: "{{ pan0_cidr }}"                                                     #  10. 11. 10. 10/29
        pan0_cidr_netmask: "{{ pan0_cidr | ansible.utils.ipaddr('netmask') }}"           # 255.255.255.248 ↵
        # If the specified CIDR is the network address itself
        # or the unusable broadcast address, then use the first usable address.
        # Dnsmasq can deal with it.
        # Important: ipaddr untypically returns None if the CIDR is the network address.
        pan0_cidr_address: >-                                                            #  10. 11. 10. 10
          {{
          (pan0_cidr | ansible.utils.ipaddr('address') not in [None, pan0_cidr | ansible.utils.ipaddr('broadcast')])
          | ternary(pan0_cidr | ansible.utils.ipaddr('address'), pan0_cidr | ansible.utils.ipaddr('first_usable'))
          }}
        pan0_cidr_network: "{{ pan0_cidr | ansible.utils.ipaddr('network') }}"           #  10. 11. 10.  8
        pan0_cidr_first_usable: "{{ pan0_cidr | ansible.utils.ipaddr('first_usable') }}" #  10. 11. 10.  9
        pan0_cidr_last_usable: "{{ pan0_cidr | ansible.utils.ipaddr('last_usable') }}"   #  10. 11. 10. 14
        pan0_cidr_broadcast: "{{ pan0_cidr | ansible.utils.ipaddr('broadcast') }}"       #  10. 11. 10. 15

    - name: install dependencies
      become: true
      ansible.builtin.apt:
        name:
          - dnsmasq
        state: present

    # Documentation: https://dnsmasq.org/docs/dnsmasq-man.html
    - name: configure pan0 network interface for dnsmasq
      become: true
      block:
        - name: set options with values
          community.general.ini_file:
            path: /etc/dnsmasq.d/pan0.conf
            no_extra_spaces: true
            section: ''
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            mode: "0644"
          loop:
            - { option: interface, value: pan0 }
            - { option: dhcp-range, value: "{{ pan0_cidr_first_usable }},{{ pan0_cidr_last_usable }},{{ pan0_cidr_netmask }},1h" }
        - name: set options without values
          ansible.builtin.lineinfile:
            path: /etc/dnsmasq.d/pan0.conf
            line: "{{ item.option }}"
            state: present
          loop:
            - { option: dhcp-authoritative }
            - { option: dhcp-rapid-commit }
            - { option: leasefile-ro }

    - name: copy pan0 network interface config
      become: true
      ansible.builtin.template:
        src: templates/pan0.network.j2
        dest: /etc/network/interfaces.d/pan0
        force: true

    - name: restart services
      become: true
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: restarted
      loop:
        - dnsmasq.service

    - name: explain pan0 network interface
      become: true
      vars:
        marker_begin_latin1: "MARKER_BEGIN"
        marker_begin_unicode: "─=≡Σ(([ 蓬•ｏ•]⊐"
        marker_end_latin1: "MARKER_END"
        marker_end_unicode: "​​​"
        path: /etc/motd
      block:
        - name: convert markers to latin1
          ansible.builtin.replace:
            path: "{{ path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: "{{ marker_begin_unicode | regex_escape() }}", replace: "{{ marker_begin_latin1 }}" }
            - { regexp: "{{ marker_end_unicode | regex_escape() }}", replace: "{{ marker_end_latin1 }}" }
        - name: update block
          ansible.builtin.blockinfile:
            path: /etc/motd
            create: true
            mode: "0644"
            marker: "{mark}"
            marker_begin: "{{ marker_begin_latin1 }} Bluetooth PAN"
            block: |2
                  INTERFACE: pan0 — IP {{ pan0_cidr_address }} / {{ pan0_cidr_netmask }} — DHCP: {{ pan0_cidr_first_usable }} - {{ pan0_cidr_last_usable }}
                  HELP: pihero pan
            marker_end: "{{ marker_end_latin1 }}"
        - name: convert markers to unicode
          ansible.builtin.replace:
            path: "{{ path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: "{{ marker_begin_latin1 }}", replace: "{{ marker_begin_unicode }}" }
            - { regexp: "{{ marker_end_latin1 }}", replace: "{{ marker_end_unicode }}" }
