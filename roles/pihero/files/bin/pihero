#!/bin/bash

shopt -s nullglob # expand to nothing if no match

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# shellcheck source=./../lib/lib.bash
source "$SCRIPT_DIR/../lib/lib.bash"

customize_cli() {
    if is_tty; then
        export DIE_TEMPLATE && DIE_TEMPLATE=" $(hero --mood sad) "'{{ Foreground "1" "%s" }}'$'\n'
    fi

    export GUM_CHOOSE_CURSOR
    GUM_CHOOSE_CURSOR=" $(CLICOLOR_FORCE=1 hero --mood=neutral) "
    export GUM_CHOOSE_CURSOR_FOREGROUND='11' # 3=yellow + 8=bright
}

main() {
    [ ! "$1" = --hero-moods ] || {
        shift && hero --moods "$@"
        exit
    }
    [ ! "$1" = --hero-frames ] || {
        CLICOLOR_FORCE=1 hero_frames
        exit
    }
    [ ! "$1" = --hero-animate ] || {
        hero_animate --vertical-padding 1 --loops 1 <(CLICOLOR_FORCE=1 hero_frames) >&2
        exit
    }
    [ ! "$1" = --hero-animate-pre-rendered ] || {
        hero_animate_pre_rendered --vertical-padding 1 --loops 1 >&2
        exit
    }

    local animation_pid
    if [ $# = 0 ] && is_tty; then
        hero_animate_pre_rendered --vertical-padding 1 --loops 1 --cleanup 0 >&2 &
        animation_pid=$!
    fi

    customize_cli
    local extension_dirs=("$SCRIPT_DIR/..")
    local extensions && mapfile -t extensions < <(list_extensions "${extension_dirs[@]}")

    if [ "$animation_pid" ] && kill -0 "$animation_pid" 2>/dev/null; then
        wait "$animation_pid"
    fi

    [ $# -gt 0 ] || GUM_CHOOSE_HEADER=' ' exec_completed --name command diag "${extensions[@]}"
    local cmd=$1 && shift

    # run all diagnostics
    if [ "$cmd" = diag ]; then
        printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=neutral)" "Pi Hero" >&2
        local result=0 diagnostics=()

        for cmd in "${extensions[@]}"; do
            run_extension_command "$cmd" diag "${extension_dirs[@]}"
            diagnostics+=("$cmd" "$?")
            printf '\n' >&2
        done

        local summary=''
        while ((${#diagnostics[@]} > 0)); do
            local icon
            if [ "${diagnostics[1]}" -eq 0 ]; then
                printf -v icon '\e[32m✔︎\e[0m'
            else
                printf -v icon '\e[31m✘︎\e[0m'
                result=1
            fi
            printf -v summary '%s   \e[1m%s %s\e[0m' "$summary" "${diagnostics[0]}" "$icon"
            diagnostics=("${diagnostics[@]:2}")
        done
        printf ' %s%s\n' "$(hero --mood="$result")" "$summary" >&2
        printf '\n' >&2

        exit "$result"
    fi

    # match extension command
    local extension
    for extension in "${extensions[@]}"; do
        if [ "$cmd" = "$extension" ]; then
            local subcommands && mapfile -t subcommands < <(list_extension_commands "$extension" "${extension_dirs[@]}")
            [ "${#subcommands[@]}" -gt 0 ] || hero_die sad "no commands found for extension $extension"

            [ $# -gt 0 ] || GUM_CHOOSE_HEADER=' ' exec_completed --name subcommand "${subcommands[@]}" -- "$cmd"
            local subcmd=$1 && shift

            local subcommand
            for subcommand in "${subcommands[@]}"; do
                if [ "$subcmd" = "$subcommand" ]; then
                    run_extension_command "$cmd" "$subcmd" "${extension_dirs[@]}" -- "$@"
                    exit $?
                fi
            done

            # no subcommand matched
            usage --name subcommand "${subcommands[@]}" -- "$cmd"
            for t in 0 1 2; do
                if [ -t "$t" ]; then
                    echo "t$t: yes"
                else
                    echo "t$t: no"
                fi
            done
            die "subcommand $subcmd not found"
        fi
    done

    # no command matched
    usage --name command diag "${extensions[@]}"
    die "command $cmd not found"
}

main "$@"
