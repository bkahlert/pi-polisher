#!/bin/bash
# USB Gadget: https://www.kernel.org/doc/html/latest/usb/index.html

shopt -s nullglob

is_module_loaded() {
  local -r module=${1?:module missing}
  lsmod | grep -q "^$module "
}

load_module() {
  local -r module=${1?:module missing}
  ! is_module_loaded "$module" || return 0

  modprobe "$module"
  for i in {1..100}; do
    ! is_module_loaded "$module" || return 0
    sleep 0.1
  done

  printf "\033[31mERROR: Failed to load module \033[3m%s\033[23m within \033[3m%s\033[23m.\033[0m\n" "$module" "10s" >&2
  exit 1
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#creating-the-gadgets
create_gadget() {
  local -r CONFIGFS_HOME=/sys/kernel/config
  local -r gadget_name=${1?:gadget name missing}
  local -r gadget_dir="$CONFIGFS_HOME/usb_gadget/$gadget_name"

  printf "\033[1mCreating gadget \033[3m%s\033[23m...\033[0m\n" "$gadget_name" >&2

  load_module libcomposite

  mkdir -p "$gadget_dir" || { printf "\033[31mERROR: Failed to create directory \033[3m%s\033[23m.\033[0m\n" "$gadget_dir" >&2 && exit 1; }
  cd "$gadget_dir" || { printf "\033[31mERROR: Failed to change directory to \033[3m%s\033[23m.\033[0m\n" "$gadget_dir" >&2 && exit 1; }

  echo '0x1d6b' >idVendor  # The Linux Foundation,
                           # see https://www.usb.org/sites/default/files/usb_vids_080223.pdf
                           # in "Vendor ID (Decimal Format)" column (0x1d6b = 7523)
  echo '0x0104' >idProduct # Multifunction Composite Gadget,
                           # see https://devicehunt.com/view/type/usb/vendor/1D6B/device/0104
  echo '0x0100' >bcdDevice # v1.0.0
  echo '0x0200' >bcdUSB    # USB2
  echo '0xef' >bDeviceClass
  echo '0x02' >bDeviceSubClass
  echo '0x01' >bDeviceProtocol

  mkdir -p strings/0x409
  echo '{{ usb_gadget.serialnumber }}' >strings/0x409/serialnumber
  echo '{{ usb_gadget.manufacturer }}' >strings/0x409/manufacturer
  echo '{{ usb_gadget.product }}' >strings/0x409/product

  # OS descriptors
  mkdir -p os_desc
  echo '1' >os_desc/use
  echo '0xcd' >os_desc/b_vendor_code
  echo 'MSFT100' >os_desc/qw_sign
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#creating-the-configurations
create_config() {
  local -r config=${1?:config missing}

  printf "\033[1mCreating configuration \033[3m%s\033[23m...\033[0m\n" "$config" >&2

  case "$config" in
  *.*)
    mkdir -p "configs/$config"
    mkdir -p "configs/$config"/strings/0x409
    echo 'USB gadget features: {% if usb_gadget_features.keys() %}{{ usb_gadget_features.keys() | join(', ') }}{% else %}-{% endif %}' >"configs/$config"/strings/0x409/configuration
    echo '250' >configs/c.1/MaxPower
    ln -s "configs/$config" os_desc
    ;;
  *)
    printf "\033[31mERROR: The configuration needs to have the format \033[3m<name>\033[23m.\033[3m<number>\033[23m.\033[0m\n" >&2
    exit 1
    ;;
  esac
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#creating-the-functions
create_function() {
  local -r function_name=${1?:function name missing}
  local -r instance_name=${2?:instance name missing}
  local -r function="$function_name.$instance_name"

  printf "\033[1mCreating function \033[3m%s\033[23m...\033[0m\n" "$function" >&2

  mkdir -p "functions/$function"

  case "$function_name" in
  acm)
    # see https://www.kernel.org/doc/html/latest/usb/gadget-testing.html#acm-function
    # nothing to do
    ;;
  ecm)
    # Ethernet Control Model (ECM): ethernet over USB protocol by the USB Implementers Forum
    # see https://www.kernel.org/doc/html/latest/usb/gadget-testing.html#ecm-function
    # see https://en.wikipedia.org/wiki/Ethernet_over_USB
    {% if usb_gadget_features.ethernet.device_mac is defined %}
    echo '{{ usb_gadget_features.ethernet.device_mac }}' >"functions/$function"/dev_addr
    {% endif %}
    {% if usb_gadget_features.ethernet.host_mac is defined %}
    echo '{{ usb_gadget_features.ethernet.host_mac }}' >"functions/$function"/host_addr
    {% endif %}
    ;;
  rndis)
    # Remote NDIS (RNDIS): proprietary ethernet over USB protocol by Microsoft
    # see https://en.wikipedia.org/wiki/RNDIS
    # see https://en.wikipedia.org/wiki/Ethernet_over_USB
    # TODO test (on Windows)
    mkdir -p "functions/$function"/os_desc/interface.rndis
    echo RNDIS >"functions/$function"/os_desc/interface.rndis/compatible_id
    echo 5162001 >"functions/$function"/os_desc/interface.rndis/sub_compatible_id
    ;;
  *)
    printf "\033[1mDelegating creation of function \033[3m%s\033[23m to \033[3m%s\033[23m...\033[0m\n" "$function" 'usb-gadget-setup-custom' >&2
    (usb-gadget-setup-custom create_custom_function "$@")
    ;;
  esac
}

assoc_function() {
  local -r function=${1?:function name missing}.${2?:instance name missing}
  local -r config=${3?:config missing}

  printf "\033[1mAssociating function \033[3m%s\033[23m with configuration \033[3m%s\033[23m...\033[0m\n" "$function" "$config" >&2

  ln -s "functions/$function" "configs/$config/"
}

enable_gadget() {
  printf "Enabling gadget in \033[3m%s\033[23m... " "$PWD" >&2
  if [ "$(cat /sys/kernel/config/usb_gadget/g1/UDC)" ]; then
    printf "\033[33mWARNING: Gadget in \033[3m%s\033[23m is already enabled.\033[0m\n" "$PWD" >&2
  else
    ls /sys/class/udc >UDC
    printf "\033[32m✔︎\033[0m\n" >&2
  fi
}

disable_gadget() {
  printf "Disabling gadget in \033[3m%s\033[23m... " "$PWD" >&2
  if [ "$(cat /sys/kernel/config/usb_gadget/g1/UDC)" ]; then
    echo '' >UDC
    printf "\033[32m✔︎\033[0m\n" >&2
  else
    printf "\033[33mWARNING: No enabled gadget found in \033[3m%s\033[23m.\033[0m\n" "$PWD" >&2
  fi
}

# see https://www.kernel.org/doc/html/latest/usb/gadget_configfs.html#cleaning-up
destroy_gadget() {
  local -r CONFIGFS_HOME=/sys/kernel/config
  local -r gadget_name=${1?:gadget name missing}
  local -r gadget_dir="$CONFIGFS_HOME/usb_gadget/$gadget_name"

  [ -d "$gadget_dir" ] || return 0

  (cd "$gadget_dir" && disable_gadget)

  printf "\033[1mRemoving functions from configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    for function in "$config"/*.*; do
      printf "Removing function \033[3m%s\033[23m from configuration \033[3m%s\033[23m.\033[0m\n" "${function##*/}" "${config##*/}" >&2
      rm "$function"
    done
  done

  printf "\033[1mRemoving strings directories from configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    for strings in "$config"/strings/*; do
      printf "Removing strings directory \033[3m%s\033[23m from configuration \033[3m%s\033[23m.\033[0m\n" "${strings##*/}" "${config##*/}" >&2
      rmdir "$strings"
    done
  done

  printf "\033[1mRemoving os_desc symlink from configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    printf "Removing os_desc symlink from configuration \033[3m%s\033[23m.\033[0m\n" "${config##*/}" >&2
    [ ! -e "$config"/os_desc ] || rm "$config"/os_desc
  done

  printf "\033[1mRemoving configurations...\033[0m\n" >&2
  for config in "$gadget_dir"/configs/*.*; do
    printf "Removing configuration \033[3m%s\033[23m.\033[0m\n" "${config##*/}" >&2
    rmdir "$config"
  done

  printf "\033[1mRemoving functions from the gadget...\033[0m\n" >&2
  for function in "$gadget_dir"/functions/*; do
    printf "Removing function \033[3m%s\033[23m.\033[0m\n" "${function##*/}" >&2
    rmdir "$function"
  done

  printf "\033[1mRemoving strings directories from the gadget...\033[0m\n" >&2
  for strings in "$gadget_dir"/strings/*; do
    printf "Removing strings directory \033[3m%s\033[23m from the gadget.\033[0m\n" "${strings##*/}" >&2
    rmdir "$strings"
  done

  printf "\033[1mRemoving os_desc directory from the gadget...\033[0m\n" >&2
  [ ! -d "$gadget_dir"/os_desc ] || rmdir "$gadget_dir"/os_desc

  printf "\033[1mRemoving the gadget \033[3m%s\033[23m...\033[0m\n" "$gadget_name" >&2
  rmdir "$gadget_dir"
}

main() {
  local args=() destroy_only=0
  while(($#)); do
    case $1 in
    --destroy-only)
      destroy_only=1 && shift
      ;;
    *)
      args+=("$1") && shift
      ;;
    esac
  done
  set -- "${args[@]}"

  local -r gadget=g1
  local -r config=c.1
  local -r instance_name=usb0

  if [ $destroy_only -eq 1 ]; then
    destroy_gadget "$gadget"
    return 0
  fi

  printf "\033[1mSetting up USB gadget \033[3m%s\033[23m...\033[0m\n" "$gadget" >&2

  destroy_gadget "$gadget"

  create_gadget "$gadget"
  create_config "$config"

  {% set feature_mappings = { "ethernet": "ecm", "serial": "acm" } %}

  {% for feature_name, function_parameters in usb_gadget_features.items() %}
    {% set function_name = feature_mappings[feature_name] if feature_name in feature_mappings else feature_name %}

    {% if function_parameters is none %}
    create_function '{{ function_name }}' "$instance_name"
    {% else %}
    create_function '{{ function_name }}' "$instance_name" "$(printf %s '{{ function_parameters | b64encode }}' | base64 --decode)"
    {% endif %}
    if [ $? -eq 0 ]; then
      assoc_function '{{ function_name }}' "$instance_name" "$config"
    else
      printf "\033[31mERROR: The function \033[3m%s.%s\033[23m failed to create. It won't be associated with configuration \033[3m%s\033[23m.\033[0m\n" \
        '{{ function_name }}' "$instance_name" "$config" >&2
      local -r indent='    '
      local -r state=$(ls -1lAFhctR "functions/{{ function_name }}.$instance_name" | tail -n +2 | sed 's/^/'"$indent"'/')
      printf "This is what \033[3m%s\033[23m looked like:\n%sDirectory %s\n%s\n" \
        "functions/{{ function_name }}.$instance_name" \
        "$indent" \
        "$PWD/functions/{{ function_name }}.$instance_name" \
        "${state:-$(printf '%s\033[3m%s\033[23m' "$indent" empty)}" >&2
    fi
  {% endfor %}

  # watch the udev event queue until all current events are handled
  # but no longer than 5 seconds
  udevadm settle -t 5 || :

  enable_gadget

  {% for feature_name in usb_gadget_features.keys() %}
    {% if feature_name == "serial" %}
    systemctl start serial-getty@ttyGS0.service
    {% endif %}
    {% if feature_name == "ethernet" %}
    ifup usb0
    systemctl restart dnsmasq
    {% endif %}
  {% endfor %}
}

main "$@"
