#!/bin/bash

shopt -s nullglob # expand to nothing if no match

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# shellcheck source=./../lib/lib.bash
source "$SCRIPT_DIR/../lib/lib.bash"

hero() {
  local mood=neutral face
  while (($# > 0)); do
    case "$1" in
    --mood=*)
      mood="${1#*=}" && shift
      ;;
    *)
      break
      ;;
    esac
  done

  case "$mood" in
  neutral)
    face=('蓬' '•' 'ｏ' '•')
    ;;
  0 | happy)
    face=('✿' '＾' 'ｖ' '＾')
    ;;
  1 | 2 | sad)
    face=('༶' '◕' '︿' '◕')
    ;;
  *)
    face=('༶' '´◑' '︿' '◑`')
    ;;
  esac
  printf '\e[33m─=≡\e[91mΣ\e[90m\e[101m((\e[30m\e[43m[ \e[31m%s\e[30m%s\e[91m%s\e[30m%s]\e[0m\e[93m⊐\e[0m' "${face[@]}"
}

# TODO call share with sudo

local_pan_command() {
  if [ "$#" -eq 0 ]; then
    run_optional /opt/pihero/bt-pan-diag
  elif [ "${1:-}" = diag ]; then
    run_optional /opt/pihero/bt-pan-diag "${@:1}"
  else
    run_optional sudo /opt/pihero/bt-pan "$@"
  fi
}

local_gadget_command() {
  if [ "$#" -eq 0 ]; then
    run_optional /opt/pihero/usb-gadget diag
  elif [ "${1:-}" = diag ]; then
    run_optional /opt/pihero/usb-gadget "$@"
  else
    run_optional sudo /opt/pihero/usb-gadget "$@"
  fi
}

extension_get() {
  local extension="$SCRIPT_DIR/../${1?name missing}.bash"
  if [ -f "$extension" ]; then
    printf '%s\n' "$extension"
    return 0
  else
    return 1
  fi
}

extension_invoke() {
  local extension no_header=0
  while (($# > 0)); do
    case "$1" in
    --no-header)
      no_header=1 && shift
      ;;
    *)
      break
      ;;
    esac
  done

  local cmd="${1:?command missing}" && shift
  if ! extension=$(extension_get "$cmd"); then
    printf "\e[31mERROR: No extension \e[3m%s\e[23m found\n" "$cmd" >&2
    exit 124
  fi

  (
    # shellcheck disable=SC1090
    source "$extension"

    local public=() found
    while read -r function_declaration; do
      local function_with_flags="${function_declaration#declare -f}"
      local function_name="${function_with_flags#* }"
      [ "${function_name:0:1}" = '+' ] || continue
      [ "${function_name:1}" = 'default' ] || public+=("${function_name:1}")
      if [ "${function_name:1}" = "${1:-default}" ]; then
        found=$function_name
      fi
    done < <(declare -F)

    if [ "$found" ]; then
      [ "$no_header" = 1 ] || printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=neutral)" "$cmd${1:+ "$(printf "\e[39m%s" "$1")"}" >&2
      "$found" "${@:2}"
    else
      {
        if [ "$#" -eq 0 ]; then
          printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=neutral)" "$cmd"
        else
          printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=sad)" "$(printf "%s \e[31m%s \e[0m%s" "$cmd" "$1" "← unknown subcommand")"
        fi
        {
          printf "\e[1mUsage: %s %s \e[3m%s\e[23m\e[0m\n" "${0##*/}" "$cmd" "subcommand"
          printf "\n"
          printf "Subcommands:\n"
          printf "  %s\n" "${public[@]}"
          printf '\n'
        } | sed 's/^/     /'
      } >&2
      exit 1
    fi
  )
}

main() {
  local extensions=("$SCRIPT_DIR/../"*.bash)
  local extension_commands=("${extensions[@]##*/}") && extension_commands=("${extension_commands[@]%.bash}")
  local local_commands=(pan gadget)

  local cmd
  if [ $# -eq 0 ]; then
    cmd=diag
  else
    cmd=$1
    shift
  fi

  # run all diagnostics
  if [ "$cmd" = diag ]; then
    printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=neutral)" "Pi Hero" >&2
    local result=0 diagnostics=()

    for cmd in "${local_commands[@]}"; do
      "local_${cmd}_command" diag
      diagnostics+=("$cmd" "$?")
      printf '\n' >&2
    done

    for cmd in "${extension_commands[@]}"; do
      extension_invoke --no-header "$cmd" diag
      diagnostics+=("$cmd" "$?")
      printf '\n' >&2
    done

    local summary=''
    while ((${#diagnostics[@]} > 0)); do
      local icon
      if [ "${diagnostics[1]}" -eq 0 ]; then
        printf -v icon '\e[32m✔︎\e[0m'
      else
        printf -v icon '\e[31m✘︎\e[0m'
        result=1
      fi
      printf -v summary '%s   \e[1m%s %s\e[0m' "$summary" "${diagnostics[0]}" "$icon"
      diagnostics=("${diagnostics[@]:2}")
    done
    printf ' %s%s\n' "$(hero --mood="$result")" "$summary" >&2
    printf '\n' >&2

    exit "$result"
  fi

  # match local command
  local local_command
  for local_command in "${local_commands[@]}"; do
    if [ "$cmd" = "$local_command" ]; then
      printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=neutral)" "$cmd" >&2
      "local_${cmd}_command" "$@"
      exit $?
    fi
  done

  # match extension command
  local extension_command
  for extension_command in "${extension_commands[@]}"; do
    if [ "$cmd" = "$extension_command" ]; then
      extension_invoke "$cmd" "$@"
      exit $?
    fi
  done

  # no command matched
  {
    if [ "$#" -eq 0 ]; then
      printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=neutral)" "Pi Hero" >&2
    else
      printf "\n %s \e[1;33m%s\e[0m\n\n" "$(hero --mood=sad)" "$(printf "\e[31m%s \e[0m%s" "$cmd" "← unknown command")" >&2
    fi
    {
      printf "\e[1mUsage: %s \e[3m%s\e[23m\e[0m\n" "${0##*/}" "command"
      printf "\n"
      printf "Commands:\n"
      printf "  %s\n" diag "${local_commands[@]}" "${extension_commands[@]}"
      printf '\n'
    } | sed 's/^/     /'
  } >&2
  exit 1
}

main "$@"
