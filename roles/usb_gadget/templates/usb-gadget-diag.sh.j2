#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# shellcheck source=./../../pihero/files/lib/lib.bash
source "$SCRIPT_DIR/lib/lib.bash"

main() {
  checks_start "USB gadget diagnostics"
  CONFIGFS_HOME=$(findmnt --output TARGET --noheadings configfs) || { printf "\e[31mERROR: Failed to find \e[3m%s\e[23m\e[0m\n" configfs >&2 && exit 1; }

  local -r gadget_name=${1:?gadget name missing}
  local -r config_name=${2:?config name missing}
  local -r instance_name=${3:?instance name missing}
  local -r gadget_dir="$CONFIGFS_HOME/usb_gadget/$gadget_name"

  printf "\e[1mChecking USB gadget \e[3m%s\e[23m...\e[0m\n" "$gadget_name" >&2

  check "/boot/config.txt contains dtoverlay=dwc2" grep -q '^dtoverlay=dwc2\(,dr_mode=.*\)\?$' /boot/config.txt
  check "/boot/cmdline.txt contains modules-load=dwc2" grep -q "modules-load=dwc2" /boot/cmdline.txt
  check "/boot/cmdline.txt contains no line breaks" grep -q "\n" /boot/cmdline.txt

  check "libcomposite module is loaded" bash -c 'lsmod | grep -q "^libcomposite "'

  check "usb-gadget service is active" systemctl -q is-active usb-gadget.service
  check "usb-gadget's vendor ID is configured" grep -q "^0x1d6b$" "$gadget_dir"/idVendor
  check "usb-gadget's product ID is configured" grep -q "^0x0104$" "$gadget_dir"/idProduct
  check "usb-gadget's bcd device is configured" grep -q "^0x0100$" "$gadget_dir"/bcdDevice
  check "usb-gadget's bcd USB is configured" grep -q "^0x0200$" "$gadget_dir"/bcdUSB
  check "usb-gadget's device class is configured" grep -q "^0xef$" "$gadget_dir"/bDeviceClass
  check "usb-gadget's device subclass is configured" grep -q "^0x02$" "$gadget_dir"/bDeviceSubClass
  check "usb-gadget's device protocol is configured" grep -q "^0x01$" "$gadget_dir"/bDeviceProtocol
  check "usb-gadget's serial number is not empty" grep -v -q "^$" "$gadget_dir"/strings/0x409/serialnumber
  check "usb-gadget's manufacturer is not empty" grep -v -q "^$" "$gadget_dir"/strings/0x409/manufacturer
  check "usb-gadget's product is not empty" grep -v -q "^$" "$gadget_dir"/strings/0x409/product
  check "usb-gadget is running" grep -q "^$(ls /sys/class/udc)$" "$gadget_dir"/UDC

  {% if usb_gadget_features.serial is defined %}
  printf "\e[1mChecking serial port...\e[0m\n" >&2
  check "usb-gadget's serial port is active" systemctl -q is-active serial-getty@ttyGS0.service
  {% endif %}

  {% if usb_gadget_features.ethernet is defined %}
  printf "\e[1mChecking ethernet...\e[0m\n" >&2
  check "dnsmasq is installed" which dnsmasq >/dev/null
  check "dnsmasq is active" systemctl -q is-active dnsmasq.service
  check "usb0 interface exists" ip link show usb0 >/dev/null
  check "usb0 interface is configured" ip -4 -o addr show usb0 | grep -q ' {{ usb0_cidr }} '
  check "usb0 interface is dhcpcd-excluded" grep -q "^denyinterfaces usb0$" /etc/dhcpcd.conf
  check "usb0 interface is configured for dnsmasq" grep -q "^interface=usb0$" /etc/dnsmasq.d/usb0.conf
  check "usb0 dnsmasq config is not malformed" grep -v -q "^interface$" /etc/dnsmasq.d/usb0.conf
  check "usb0 dnsmasq config is not malformed" grep -v -q "^leasefile-ro=" /etc/dnsmasq.d/usb0.conf
  {% endif %}

  check_summary

  printf "\n\e[1mFurther debugging:\e[0m\n" >&2
  printf "  - check usb-gadget's config: \e[3m%s\e[23m\n" "ls -1lAFhctR '$gadget_dir'" >&2
  printf "  - check usb-gadget service logs: \e[3m%s\e[23m\n" "systemctl status usb-gadget.service; journalctl -b -u usb-gadget.service" >&2
  printf "  - stop usb-gadget interactively: \e[3m%s\e[23m\n" "hero gadget stop" >&2
  printf "  - start usb-gadget interactively: \e[3m%s\e[23m\n" "hero gadget start" >&2
  {% if usb_gadget_features.ethernet is defined %}
  printf "  - scan for connected hosts: \e[3m%s\e[23m\n" "command -v nmap >/dev/null 2>&1 || sudo apt-get install -yqq nmap; nmap -sn 10.10.10.11-14" >&2
  printf "  - check networking: \e[3m%s\e[23m\n" "systemctl status networking" >&2
  for service in dnsmasq; do
    printf "  \e[1m- regarding service \e[3m%s\e[23m:\e[0m\n" "$service" >&2
    printf "    - check status: \e[3m%s\e[23m\n" "systemctl status $service.service" >&2
    printf "    - check logs: \e[3m%s\e[23m\n" "journalctl -b -e -u $service.service" >&2
    printf "    - stop service: \e[3m%s\e[23m\n" "sudo systemctl stop $service.service" >&2
    printf "    - start service interactively: \e[3m%s\e[23m\n" "$(service_start_cmdline "$service.service")" >&2
  done
  {% endif %}

}

main "$@"
