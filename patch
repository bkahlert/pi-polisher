#!/usr/bin/env bash

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

HOST=${HOST:-foo.local}                                     # The host to patch (default: foo.local)
PIHERO=${PIHERO:-0}                                         # Whether to update the pihero entrypoint (default: no)
PIHERO_FILES="$SCRIPT_DIR/roles/pihero/files"               # The directory containing the bin and lib directory of the pihero entrypoint (default: same as used by Ansible role)
PIHERO_SPLASH=${PIHERO_SPLASH:-0}                           # Whether to update the pihero splash component (default: no)
PIHERO_SPLASH_FILES="$SCRIPT_DIR/roles/pihero_splash/files" # The directory containing the files of the pihero splash component (default: same as used by Ansible role)

# Ansible ad-hoc command wrapper which runs:
# ansible $HOST --become -m $1 -a "$2 $3 $4 ..."
m() {
  local module=${1?module missing} && shift
  local args="$*"
  ansible "$HOST" --become -m "$module" -a "$args"
}

# rsync command wrapper which runs:
# rsync --recursive --compress --delete --rsh='ssh -o ConnectTimeout=120' --rsync-path='sudo rsync' "${@:1:$#-1}" "$HOST:${@: -1}"
r() {
  [ "$#" -ge 2 ] || {
    printf '\e[31mAt least two parameters—the files to copy, and the destination—are required\n'
    exit 1
  }
  local src=("${@:1:$#-1}")
  local dst="$HOST:${@: -1}"
  printf "Copying \e[3m%s\e[23m to \e[3m%s\e[23m... " "${src[*]}" "$dst"
  rsync --recursive --compress --delete --rsh='ssh -o ConnectTimeout=10' --rsync-path='sudo rsync' "${src[@]}" "$dst" || {
    printf '\e[31Failed to copy \e[3m%s\e[23m to \e[3m%s\e[23m\n' "$src" "$dst"
    exit 1
  }
  printf '\e[32m✔︎\e[0m\n'
}

if [ "$PIHERO" = 0 ] && [ "$PIHERO_SPLASH" = 0 ]; then
  printf '\e[1mUsage: PIHERO=1 PIHERO_SPLASH=1 %s\e[0m\n' "${0##*/}"
  printf ' Hint: Type \e[3m%s\e[23m to set a different host and the appropriate option or options for the remainder of your shell session.\n' \
    'export HOST=bar.local PIHERO=1 [...]'
  printf '       Check the source code for more options.\n'
  exit 1
fi

# deploy pihero entrypoint
if [ ! "$PIHERO" = 0 ]; then
  r "$PIHERO_FILES/bin/" /opt/pihero/bin/
  r "$PIHERO_FILES/lib/" /opt/pihero/lib/
  r "$PIHERO_FILES/"*.bash /opt/pihero
fi

# deploy pihero_splash component
if [ ! "$PIHERO_SPLASH" = 0 ]; then
  r "$PIHERO_SPLASH_FILES/"*.bash /opt/pihero
fi
